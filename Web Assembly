Web Assembly 

==> The Next Generation Web PlatForm

In the Words of Creators:=>

WebAssembly, developed by the W3C, is in the words of its creators a “compilation target.” Developers don’t write WebAssembly directly; they write in the language of their choice, which is then compiled into WebAssembly bytecode. The bytecode is then run on the client—typically in a web browser—where it’s translated into native machine code and executed at high speed.


WebAssembly code is meant to be faster to load, parse, and execute than JavaScript. When WebAssembly is used by a web browser, there is still the overhead of downloading the WASM module and setting it up, but all other things being equal WebAssembly runs faster. WebAssembly also provides a sandboxed execution model, based on the same security models that exist for JavaScript now.


For two decades now, we’ve had only one programming language available to use natively in a web browser: JavaScript. The slow death of third-party binary plug-ins has ruled out other languages, such as Java and Flash’s ActionScript, as first-class citizens for web development. Other web languages, like CoffeeScript, are merely compiled to JavaScript.

It is worth noting that WebAssembly apps aren’t meant to replace JavaScript apps—at least, not yet. Instead, think of WebAssembly as a companion to JavaScript. 


Developers should consider WebAssembly for performance-intensive use cases such as games, music streaming, video editing, and CAD applications.






A browser improvement:
 Browsers will understand the binary format, which means we’ll be able to compile binary bundles that compress smaller than the text JavaScript we use today. Smaller payloads mean faster delivery. Depending on compile-time optimization opportunities, WebAssembly bundles may run faster than JavaScript, too!




#3rd March 2019

Steps included in Web Assembly Creation

Write:	 Write something (or use an existing project) in C, C++, or Rust

Compile:	 Compile it into WebAssembly (giving you a binary .wasm file)

Include: 	Get that .wasm file into a project

Instantiate:	 Write a bunch of asynchronous JavaScript that will compile the .wasm binary and instantiate it into something that JS can play nicely with.


Tool Used To Create  a sample .wasm file WebAssemblyExplorer


the First Column in image is C++ Program that we want to Compile into .wasm
Second Column Shows Us the WAT(Web Assembly text ) Format
Third Column Shows Assembly Code 


WAT exists because we humans generally have a hard time making sense of straight binary. It’s essentially a layer of abstraction that helps you understand and interact with your WebAssembly code.







April 7th ---Other Content 

Service Workers -- Allowing You to Do Offline????
SandBoxed Enviroment 

April 7th----W/A means Web Assembly (Implementation Of Web Assembly as in Google I/O 2018
https://codelabs.developers.google.com/codelabs/hour-chipmunk/#0)


web assembly is a new low level binary Format 
Compiled From Other Languages 
Offer maximized Perfomance

Advantages of Web Assembly:->>
Perfomance
W/A designed For Speed 
javascript is Dynamic Language (Easier to Write )


W/A offers amazing Portabilty
Compile From Other Languages (C++)
 C++ is Supported on Every Platform including Ios and android 
 C++ as a common language 


 W/A Flexibilty
Currently Supported Languages are C ,C++, Rust
Other Languages Adding Support Kotlin and .Net



Why Do W/A matters
Why Do We wanna add interactivity in web ?


Initial Page
Javascript Came Along and was Created Within a single 10-Day Hackathon
Bring Some Basic level of Code  


Why Did App's Start Moving to Web?
Increase in Interactivity?
 Three Fundamental Powers of Web
 --Linkabilty
 ur app is accessible through a single sharable String 
--Safety 
	Need Not to be Installed the app is Delivered to you in a Sandboxed Enviroment 
--Universal Platform
Code Base Lives in a Single Place and All the User Can access


W/A was not Created to Replace JavaScript
the two were Designed to InteOperate 


